proposed refactoring files:


dabax_util:
===========

list of imports:
----------------
from orangecontrib.xoppy.util.xoppy_xraylib_util import bragg_metrictensor, interface_reflectivity

list of functions:
------------------
DABAX*    def get_dabax_file(filename, dabax_repository=dabax_repository, verbose=True):

DABAX*    def Crystal_GetCrystal(entry_name='YB66', filename='Crystals.dat', dabax_repository=dabax_repository, verbose=True):
DABAX*    def Crystal_GetCrystalsList(dabax_repository=dabax_repository, verbose=True):
DABAX*    def Crystal_dSpacing(cryst, h, k, l):
DABAX*    def Bragg_angle(cryst, E_keV, h, k, l):


DABAX?       def get_f0_coeffs_from_dabax_file(entry_name="Y3+", filename="f0_InterTables.dat",dabax_repository=dabax_repository, verbose=True):
DABAX?       def f0_with_fractional_charge(Z, charge=0.0, filename="f0_InterTables.dat", dabax_repository=dabax_repository,verbose=True):
F0_UTIL?     def calculate_f0_from_f0coeff(f0coeff, ratio):
F0_UTIL?     def __f0_interpolate_coefficients(charge, interesting_entries, charge_list, coefficient_list, verbose=True):
F0_UTIL?     def __f0func(q, a1, a2, a3, a4, a5, a6, a7, a8, a9):

DABAX_UTIL   def f1f2_calc_dabax(descriptor,energy,theta=3.0e-3,F=0,density=None,rough=0.0,verbose=True,filename="f1f2_Windt.dat",dabax_repository=dabax_repository,interpolation_log=False):
DABAX_UTIL   def cross_calc_dabax(descriptor,energy,col_titles=None,theta=3.0e-3,partial="TotalCrossSection",casematch=1,density=None,unit=0,verbose=True,filename="CrossSec_EPDL97.dat",dabax_repository=dabax_repository,interpolation_log=False):

DABAX        def atomic_weights_dabax(descriptor,filename="AtomicWeights.dat",dabax_repository=dabax_repository,verbose=True,):
DABAX        def atomic_symbols_dabax():
DABAX        def atomic_names_dabax():
DABAX        def atomic_number_dabax(symbol):
DABAX        def atomic_constants_dabax(descriptor,filename="AtomicConstants.dat",dabax_repository=dabax_repository,verbose=True,return_item=0,return_label=None,):
DABAX        def element_density_dabax(descriptor,filename="AtomicConstants.dat",dabax_repository=dabax_repository, verbose=True,):

COMPOUND_PARSER           def CompoundParser(descriptor, dabax_repository=dabax_repository, verbose=True):
COMPOUND_PARSER           def parse_formula(formula, verbose=True):

xoppy_dabax_util.py:
====================

import list:
------------

from dabax_util import calculate_f0_from_f0coeff, f0_with_fractional_charge
from dabax_util import Crystal_GetCrystal
from dabax_util import atomic_symbols_dabax
from dabax_util import f0_with_fractional_charge
from dabax_util import CompoundParser
from xoppy_xraylib_util import load_bragg_preprocessor_file

list of functions
------------------

DABAX_UTIL?      def bragg_calc2(descriptor="YB66", hh=1, kk=1, ll=1, temper=1.0, emin=5000.0, emax=15000.0, estep=100.0, ANISO_SEL=0,fileout=None,sourceCryst=2, # 0=xraylib, 1=dabax, 2=auto sourceF0=2,    # 0=xraylib, 1=dabax, 2=autodo_not_prototype=0, # 0=use site groups (recommended), 1=use all individual sitesverbose=True,dabax_repository="",):
CRYSTAL_UTIL?    def TemperFactor(sinTheta_lambda,anisos,Miller={'h':1,'k':1,'l':1},cell={'a':23.44,'b':23.44,'c':23.44},n=1936):
DABAX_UTIL*      def f0_calc_dabax(MAT_FLAG,DESCRIPTOR,GRIDSTART,GRIDEND,GRIDN,FILE_NAME="",charge=0.0,dabax_repository="",):
CRYSTAL_UTIL?    def check_temperature_factor():
CRYSTAL_UTIL?    def check_structure_factor(descriptor="Si", hh=1, kk=1, ll=1, energy=8000,do_assert=True, models=[1,1,1],dabax_repository=""):


xoppy_xraylib_util.py:
======================

list of functions:
------------------

IO_UTIL         def write_spec_file(file_out,data,titles,scan_title=""):
XRAYLIB_UTIL*   def nist_compound_list():
XRAYLIB_UTIL*   def density(descriptor):
XRAYLIB_UTIL*   def density_element(DESCRIPTOR, verbose=False):
XRAYLIB_UTIL*   def density_nist(DESCRIPTOR, verbose=False):
XRAYLIB_UTIL*   def descriptor_kind_index(descriptor):

COMPOUND_PARSER      # copied and enhanced in dabax_util TODO: remove this one
COMPOUND_PARSER      def parse_formula(formula): # included now in xraylib, so not used but kept for other possible uses


XRAYLIB_UTIL*        def Refractive_Index_Re(descriptor, energy_in_keV, density):
XRAYLIB_UTIL*        def Refractive_Index_Im(descriptor, energy_in_keV, density):

MIRROR_UTIL     # used by xpower TODO: merge with interface_reflectivity
MIRROR_UTIL     def reflectivity_fresnel(refraction_index_delta=1e-5,refraction_index_beta=0.0,grazing_angle_mrad=3.0,roughness_rms_A=0.0,photon_energy_ev=10000.0):
MIRROR_UTIL     def interface_reflectivity(alpha,gamma,theta1):
XRAYLIB_UTIL*   def f0_calc(MAT_FLAG,DESCRIPTOR,GRIDSTART,GRIDEND,GRIDN,FILE_NAME="",):
XRAYLIB_UTIL*   def f1f2_calc(descriptor, energy, theta=3.0e-3, F=0, density=None, rough=0.0, verbose=True):
XRAYLIB_UTIL*   def f1f2_calc_mix(descriptor, energy, theta=3.0e-3, F=0, density=None, rough=0.0, verbose=True):
XRAYLIB_UTIL*   def f1f2_calc_nist(descriptor, energy, theta=3.0e-3, F=0, density=None, rough=0.0, verbose=True):
XRAYLIB_UTIL*   def cross_calc(descriptor, energy, calculate=0, unit=None, density=None, verbose=True):
XRAYLIB_UTIL*   def cross_calc_mix(descriptor, energy, calculate=0, unit=None, parse_or_nist=0, density=None, verbose=True):
XRAYLIB_UTIL*   def cross_calc_nist(descriptor0, energy, calculate=0, unit=None, density=None, verbose=True):
XRAYLIB_UTIL*   def xpower_calc(energies=numpy.linspace(1000.0,50000.0,100), source=numpy.ones(100),substance=["Be"], flags=[0], dens=["?"], thick=[0.5], angle=[3.0], roughness=0.0,output_file=None):

F0_UTIL         def f0_xop(Z):
CRYSTAL_UTIL    def bragg_metrictensor(a,b,c,a1,a2,a3,RETURN_REAL_SPACE=0,RETURN_VOLUME=0,HKL=None):
CRYSTAL_UTIL    def lorentz(theta_bragg_deg,return_what=0):
IO_UTIL         def load_bragg_preprocessor_file(filename=""):
XRAYLIB_UTIL?   def bragg_calc(descriptor="Si",hh=1,kk=1,ll=1,temper=1.0,emin=5000.0,emax=15000.0,estep=100.0,fileout=None):
CRYSTAL_UTIL    def crystal_fh(input_dictionary,phot_in,theta=None,forceratio=0):
XRAYLIB_UTIL*   def mare_calc(descriptor,H,K,L,HMAX,KMAX,LMAX,FHEDGE,DISPLAY,lambda1,deltalambda,PHI,DELTAPHI,verbose=0):




new files (will be in lowercase):
==================================

COMPOUND_PARSER
IO_UTIL
F0_UTIL
CRYSTAL_UTIL
MIRROR_UTIL
DABAX <- dabax_util
DABAX_UTIL <- xoppy_dabax_util
XRAYLIB_UTIL <- xoppy_xraylib_util
